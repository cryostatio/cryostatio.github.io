(self.webpackChunkcryostat_web=self.webpackChunkcryostat_web||[]).push([[9615],{37365:module=>{eval("const clone = (obj) => {\n  if (typeof obj === 'function' || Object(obj) !== obj) {\n    return obj;\n  }\n\n  const res = new obj.constructor;\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      res[key] = clone(obj[key]);\n    }\n  }\n  return res;\n};\n\nfunction repush (array, item) {\n  for (var i = 0, c = array.length; i < c; i++) {\n    if (array[i] === item) {\n      return array.push(array.splice(i, 1)[0]);\n    }\n  }\n}\n\nfunction cacher (f, scope, postprocessor) {\n  function newf () {\n    var arg = Array.prototype.slice.call(arguments, 0),\n      args = arg.join('\\u2400'),\n      cache = newf.cache = newf.cache || {},\n      count = newf.count = newf.count || [];\n    if (cache.hasOwnProperty(args)) {\n      repush(count, args);\n      return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    count.length >= 1e3 && delete cache[count.shift()];\n    count.push(args);\n    cache[args] = f.apply(scope, arg);\n    return postprocessor ? postprocessor(cache[args]) : cache[args];\n  }\n\n  return newf;\n}\n\nfunction paths (ps) {\n  var p = paths.ps = paths.ps || {};\n  if (p[ps]) {\n    p[ps].sleep = 100;\n  } else {\n    p[ps] = {\n      sleep: 100,\n    };\n  }\n  setTimeout(function () {\n    for (var key in p) if (p.hasOwnProperty(key) && key != ps) {\n      p[key].sleep--;\n      !p[key].sleep && delete p[key];\n    }\n  });\n  return p[ps];\n}\n\nfunction box (x, y, width, height) {\n  if (x == null) {\n    x = y = width = height = 0;\n  }\n  if (y == null) {\n    y = x.y;\n    width = x.width;\n    height = x.height;\n    x = x.x;\n  }\n  return {\n    x: x,\n    y: y,\n    width: width,\n    w: width,\n    height: height,\n    h: height,\n    x2: x + width,\n    y2: y + height,\n    cx: x + width / 2,\n    cy: y + height / 2,\n    r1: Math.min(width, height) / 2,\n    r2: Math.max(width, height) / 2,\n    r0: Math.sqrt(width * width + height * height) / 2,\n    path: rectPath(x, y, width, height),\n    vb: [x, y, width, height].join(' '),\n  };\n}\n\nfunction pathClone (pathArray) {\n  var res = clone(pathArray);\n  //res.toString = toString;\n  return res;\n}\n\nfunction findDotsAtSegment (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n  var t1 = 1 - t,\n    t13 = Math.pow(t1, 3),\n    t12 = Math.pow(t1, 2),\n    t2 = t * t,\n    t3 = t2 * t,\n    x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n    y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n    mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n    my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n    nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n    ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n    ax = t1 * p1x + t * c1x,\n    ay = t1 * p1y + t * c1y,\n    cx = t1 * c2x + t * p2x,\n    cy = t1 * c2y + t * p2y,\n    alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI;\n  // (mx > nx || my < ny) && (alpha += 180);\n  return {\n    x: x,\n    y: y,\n    m: {x: mx, y: my},\n    n: {x: nx, y: ny},\n    start: {x: ax, y: ay},\n    end: {x: cx, y: cy},\n    alpha: alpha,\n  };\n}\n\nfunction is (o, type) {\n  type = String.prototype.toLowerCase.call(type);\n  if (type == 'finite') {\n    return isFinite(o);\n  }\n  if (type == 'array' &&\n    (o instanceof Array || Array.isArray && Array.isArray(o))) {\n    return true;\n  }\n  return type == 'null' && o === null ||\n    type == typeof o && o !== null ||\n    type == 'object' && o === Object(o) ||\n    Object.prototype.toString.call(o).slice(8, -1).toLowerCase() == type;\n}\n\nfunction bezierBBox (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n  if (!is(p1x, 'array')) {\n    p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n  }\n  var bbox = curveDim.apply(null, p1x);\n  return box(\n    bbox.min.x,\n    bbox.min.y,\n    bbox.max.x - bbox.min.x,\n    bbox.max.y - bbox.min.y,\n  );\n}\n\nfunction isPointInsideBBox (bbox, x, y) {\n  return x >= bbox.x &&\n    x <= bbox.x + bbox.width &&\n    y >= bbox.y &&\n    y <= bbox.y + bbox.height;\n}\n\nfunction isBBoxIntersect (bbox1, bbox2) {\n  bbox1 = box(bbox1);\n  bbox2 = box(bbox2);\n  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n    || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n      || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n    && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n      || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n}\n\nfunction base3 (t, p1, p2, p3, p4) {\n  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n    t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n}\n\nfunction bezlen (x1, y1, x2, y2, x3, y3, x4, y4, z) {\n  if (z == null) {\n    z = 1;\n  }\n  z = z > 1 ? 1 : z < 0 ? 0 : z;\n  var z2 = z / 2,\n    n = 12,\n    Tvalues = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816],\n    Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472],\n    sum = 0;\n  for (var i = 0; i < n; i++) {\n    var ct = z2 * Tvalues[i] + z2,\n      xbase = base3(ct, x1, x2, x3, x4),\n      ybase = base3(ct, y1, y2, y3, y4),\n      comb = xbase * xbase + ybase * ybase;\n    sum += Cvalues[i] * Math.sqrt(comb);\n  }\n  return z2 * sum;\n}\n\nfunction intersect (x1, y1, x2, y2, x3, y3, x4, y4) {\n  if (\n    Math.max(x1, x2) < Math.min(x3, x4) ||\n    Math.min(x1, x2) > Math.max(x3, x4) ||\n    Math.max(y1, y2) < Math.min(y3, y4) ||\n    Math.min(y1, y2) > Math.max(y3, y4)\n  ) {\n    return;\n  }\n  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n    ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n    denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n  if (!denominator) {\n    return;\n  }\n  var px = nx / denominator,\n    py = ny / denominator,\n    px2 = +px.toFixed(2),\n    py2 = +py.toFixed(2);\n  if (\n    px2 < +Math.min(x1, x2).toFixed(2) ||\n    px2 > +Math.max(x1, x2).toFixed(2) ||\n    px2 < +Math.min(x3, x4).toFixed(2) ||\n    px2 > +Math.max(x3, x4).toFixed(2) ||\n    py2 < +Math.min(y1, y2).toFixed(2) ||\n    py2 > +Math.max(y1, y2).toFixed(2) ||\n    py2 < +Math.min(y3, y4).toFixed(2) ||\n    py2 > +Math.max(y3, y4).toFixed(2)\n  ) {\n    return;\n  }\n  return {x: px, y: py};\n}\n\nfunction interHelper (bez1, bez2, justCount) {\n  var bbox1 = bezierBBox(bez1),\n    bbox2 = bezierBBox(bez2);\n  if (!isBBoxIntersect(bbox1, bbox2)) {\n    return justCount ? 0 : [];\n  }\n  var l1 = bezlen.apply(0, bez1),\n    l2 = bezlen.apply(0, bez2),\n    n1 = ~~(l1 / 8),\n    n2 = ~~(l2 / 8),\n    dots1 = [],\n    dots2 = [],\n    xy = {},\n    res = justCount ? 0 : [];\n  for (var i = 0; i < n1 + 1; i++) {\n    var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n    dots1.push({x: p.x, y: p.y, t: i / n1});\n  }\n  for (i = 0; i < n2 + 1; i++) {\n    p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n    dots2.push({x: p.x, y: p.y, t: i / n2});\n  }\n  for (i = 0; i < n1; i++) {\n    for (var j = 0; j < n2; j++) {\n      var di = dots1[i],\n        di1 = dots1[i + 1],\n        dj = dots2[j],\n        dj1 = dots2[j + 1],\n        ci = Math.abs(di1.x - di.x) < .001 ? 'y' : 'x',\n        cj = Math.abs(dj1.x - dj.x) < .001 ? 'y' : 'x',\n        is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n      if (is) {\n        if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n          continue;\n        }\n        xy[is.x.toFixed(4)] = is.y.toFixed(4);\n        var t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n          t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n          if (justCount) {\n            res++;\n          } else {\n            res.push({\n              x: is.x,\n              y: is.y,\n              t1: t1,\n              t2: t2,\n            });\n          }\n        }\n      }\n    }\n  }\n  return res;\n}\n\nfunction interPathHelper (path1, path2, justCount) {\n  path1 = path2curve(path1);\n  path2 = path2curve(path2);\n  var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n    res = justCount ? 0 : [];\n  for (var i = 0, ii = path1.length; i < ii; i++) {\n    var pi = path1[i];\n    if (pi[0] == 'M') {\n      x1 = x1m = pi[1];\n      y1 = y1m = pi[2];\n    } else {\n      if (pi[0] == 'C') {\n        bez1 = [x1, y1].concat(pi.slice(1));\n        x1 = bez1[6];\n        y1 = bez1[7];\n      } else {\n        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n        x1 = x1m;\n        y1 = y1m;\n      }\n      for (var j = 0, jj = path2.length; j < jj; j++) {\n        var pj = path2[j];\n        if (pj[0] == 'M') {\n          x2 = x2m = pj[1];\n          y2 = y2m = pj[2];\n        } else {\n          if (pj[0] == 'C') {\n            bez2 = [x2, y2].concat(pj.slice(1));\n            x2 = bez2[6];\n            y2 = bez2[7];\n          } else {\n            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n            x2 = x2m;\n            y2 = y2m;\n          }\n          var intr = interHelper(bez1, bez2, justCount);\n          if (justCount) {\n            res += intr;\n          } else {\n            for (var k = 0, kk = intr.length; k < kk; k++) {\n              intr[k].segment1 = i;\n              intr[k].segment2 = j;\n              intr[k].bez1 = bez1;\n              intr[k].bez2 = bez2;\n            }\n            res = res.concat(intr);\n          }\n        }\n      }\n    }\n  }\n  return res;\n}\n\nfunction pathBBox (path) {\n  var pth = paths(path);\n\n  if (pth.bbox) {\n    return clone(pth.bbox);\n  }\n\n  if (!path) {\n    return box();\n  }\n\n  var pathLocal = path2curve(path);\n  var x = 0;\n  var y = 0;\n  var X = [];\n  var Y = [];\n  var p = [];\n\n  for (var i = 0, c = pathLocal.length; i < c; i++) {\n    p = pathLocal[i];\n    if (p[0] == 'M') {\n      x = p[1];\n      y = p[2];\n      X.push(x);\n      Y.push(y);\n      continue;\n    }\n\n    var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n    X = X.concat(dim.min.x, dim.max.x);\n    Y = Y.concat(dim.min.y, dim.max.y);\n    x = p[5];\n    y = p[6];\n  }\n\n  var xmin = Math.min.apply(0, X);\n  var ymin = Math.min.apply(0, Y);\n  var xmax = Math.max.apply(0, X);\n  var ymax = Math.max.apply(0, Y);\n  var bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n\n  pth.bbox = clone(bb);\n  return bb;\n}\n\nfunction rectPath (x, y, w, h, r) {\n  if (r) {\n    return [\n      ['M', +x + +r, y],\n      ['l', w - r * 2, 0],\n      ['a', r, r, 0, 0, 1, r, r],\n      ['l', 0, h - r * 2],\n      ['a', r, r, 0, 0, 1, -r, r],\n      ['l', r * 2 - w, 0],\n      ['a', r, r, 0, 0, 1, -r, -r],\n      ['l', 0, r * 2 - h],\n      ['a', r, r, 0, 0, 1, r, -r],\n      ['z'],\n    ];\n  }\n  var res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']];\n  //res.toString = toString;\n  return res;\n}\n\nfunction ellipsePath (x, y, rx, ry, a) {\n  if (a == null && ry == null) {\n    ry = rx;\n  }\n  x = +x;\n  y = +y;\n  rx = +rx;\n  ry = +ry;\n  if (a != null) {\n    var rad = Math.PI / 180,\n      x1 = x + rx * Math.cos(-ry * rad),\n      x2 = x + rx * Math.cos(-a * rad),\n      y1 = y + rx * Math.sin(-ry * rad),\n      y2 = y + rx * Math.sin(-a * rad),\n      res = [['M', x1, y1], ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n  } else {\n    res = [\n      ['M', x, y],\n      ['m', 0, -ry],\n      ['a', rx, ry, 0, 1, 1, 0, 2 * ry],\n      ['a', rx, ry, 0, 1, 1, 0, -2 * ry],\n      ['z'],\n    ];\n  }\n  //res.toString = toString;\n  return res;\n}\n\nconst pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig;\nconst pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig;\n\nfunction parsePathString (pathString) {\n  if (!pathString) {\n    return null;\n  }\n  var pth = paths(pathString);\n  if (pth.arr) {\n    return clone(pth.arr);\n  }\n\n  var paramCounts = {\n      a: 7,\n      c: 6,\n      o: 2,\n      h: 1,\n      l: 2,\n      m: 2,\n      r: 4,\n      q: 4,\n      s: 4,\n      t: 2,\n      v: 1,\n      u: 3,\n      z: 0,\n    },\n    data = [];\n  if (is(pathString, 'array') && is(pathString[0], 'array')) { // rough assumption\n    data = Snap.path.clone(pathString);\n  }\n  if (!data.length) {\n    String(pathString).replace(pathCommand, function (a, b, c) {\n      var params = [],\n        name = b.toLowerCase();\n      c.replace(pathValues, function (a, b) {\n        b && params.push(+b);\n      });\n      if (name == 'm' && params.length > 2) {\n        data.push([b].concat(params.splice(0, 2)));\n        name = 'l';\n        b = b == 'm' ? 'l' : 'L';\n      }\n      if (name == 'o' && params.length == 1) {\n        data.push([b, params[0]]);\n      }\n      if (name == 'r') {\n        data.push([b].concat(params));\n      } else while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    });\n  }\n  //data.toString = pth.toString;\n  pth.arr = clone(data);\n  return data;\n}\n\nfunction pathToAbsolute (pathArray) {\n  var pth = paths(pathArray);\n  if (pth.abs) {\n    return pathClone(pth.abs);\n  }\n  if (!is(pathArray, 'array') || !is(pathArray && pathArray[0], 'array')) { // rough assumption\n    pathArray = parsePathString(pathArray);\n  }\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n  var res = [],\n    x = 0,\n    y = 0,\n    mx = 0,\n    my = 0,\n    start = 0,\n    pa0;\n  if (pathArray[0][0] == 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n  var crz = pathArray.length == 3 &&\n    pathArray[0][0] == 'M' &&\n    pathArray[1][0].toUpperCase() == 'R' &&\n    pathArray[2][0].toUpperCase() == 'Z';\n  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n    if (pa0 != pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n      switch (r[0]) {\n        case 'A':\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n        case 'V':\n          r[1] = +pa[1] + y;\n          break;\n        case 'H':\n          r[1] = +pa[1] + x;\n          break;\n        case 'R':\n          var dots = [x, y].concat(pa.slice(1));\n          for (var j = 2, jj = dots.length; j < jj; j++) {\n            dots[j] = +dots[j] + x;\n            dots[++j] = +dots[j] + y;\n          }\n          res.pop();\n          res = res.concat(catmullRom2bezier(dots, crz));\n          break;\n        case 'O':\n          res.pop();\n          dots = ellipsePath(x, y, pa[1], pa[2]);\n          dots.push(dots[0]);\n          res = res.concat(dots);\n          break;\n        case 'U':\n          res.pop();\n          res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n          r = ['U'].concat(res[res.length - 1].slice(-2));\n          break;\n        case 'M':\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n        default:\n          for (j = 1, jj = pa.length; j < jj; j++) {\n            r[j] = +pa[j] + (j % 2 ? x : y);\n          }\n      }\n    } else if (pa0 == 'R') {\n      dots = [x, y].concat(pa.slice(1));\n      res.pop();\n      res = res.concat(catmullRom2bezier(dots, crz));\n      r = ['R'].concat(pa.slice(-2));\n    } else if (pa0 == 'O') {\n      res.pop();\n      dots = ellipsePath(x, y, pa[1], pa[2]);\n      dots.push(dots[0]);\n      res = res.concat(dots);\n    } else if (pa0 == 'U') {\n      res.pop();\n      res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n      r = ['U'].concat(res[res.length - 1].slice(-2));\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n    pa0 = pa0.toUpperCase();\n    if (pa0 != 'O') {\n      switch (r[0]) {\n        case 'Z':\n          x = +mx;\n          y = +my;\n          break;\n        case 'H':\n          x = r[1];\n          break;\n        case 'V':\n          y = r[1];\n          break;\n        case 'M':\n          mx = r[r.length - 2];\n          my = r[r.length - 1];\n        default:\n          x = r[r.length - 2];\n          y = r[r.length - 1];\n      }\n    }\n  }\n  //res.toString = toString;\n  pth.abs = pathClone(res);\n  return res;\n}\n\nfunction l2c (x1, y1, x2, y2) {\n  return [x1, y1, x2, y2, x2, y2];\n}\n\nfunction q2c (x1, y1, ax, ay, x2, y2) {\n  var _13 = 1 / 3,\n    _23 = 2 / 3;\n  return [\n    _13 * x1 + _23 * ax,\n    _13 * y1 + _23 * ay,\n    _13 * x2 + _23 * ax,\n    _13 * y2 + _23 * ay,\n    x2,\n    y2,\n  ];\n}\n\n// Returns bounding box of cubic bezier curve.\n// Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n// Original version: NISHIO Hirokazu\n// Modifications: https://github.com/timo22345\nfunction curveDim (x0, y0, x1, y1, x2, y2, x3, y3) {\n  var tvalues = [],\n    bounds = [[], []],\n    a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n  for (var i = 0; i < 2; ++i) {\n    if (i == 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n    if (Math.abs(a) < 1e-12) {\n      if (Math.abs(b) < 1e-12) {\n        continue;\n      }\n      t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    b2ac = b * b - 4 * c * a;\n    sqrtb2ac = Math.sqrt(b2ac);\n    if (b2ac < 0) {\n      continue;\n    }\n    t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  var x, y, j = tvalues.length,\n    jlen = j,\n    mt;\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n    bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n  }\n\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n  bounds[0].length = bounds[1].length = jlen + 2;\n\n  return {\n    min: {x: Math.min.apply(0, bounds[0]), y: Math.min.apply(0, bounds[1])},\n    max: {x: Math.max.apply(0, bounds[0]), y: Math.max.apply(0, bounds[1])},\n  };\n}\n\nfunction a2c (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var _120 = Math.PI * 120 / 180,\n    rad = Math.PI / 180 * (+angle || 0),\n    res = [],\n    xy,\n    rotate = cacher(function (x, y, rad) {\n      var X = x * Math.cos(rad) - y * Math.sin(rad),\n        Y = x * Math.sin(rad) + y * Math.cos(rad);\n      return {x: X, y: Y};\n    });\n  if (!rx || !ry) {\n    return [x1, y1, x2, y2, x2, y2];\n  }\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n    var cos = Math.cos(Math.PI / 180 * angle),\n      sin = Math.sin(Math.PI / 180 * angle),\n      x = (x1 - x2) / 2,\n      y = (y1 - y2) / 2;\n    var h = x * x / (rx * rx) + y * y / (ry * ry);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n    var rx2 = rx * rx,\n      ry2 = ry * ry,\n      k = (large_arc_flag == sweep_flag ? -1 : 1) *\n        Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n      cx = k * rx * y / ry + (x1 + x2) / 2,\n      cy = k * -ry * x / rx + (y1 + y2) / 2,\n      f1 = Math.asin(((y1 - cy) / ry).toFixed(9)),\n      f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n    f1 < 0 && (f1 = Math.PI * 2 + f1);\n    f2 < 0 && (f2 = Math.PI * 2 + f2);\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n  var df = f2 - f1;\n  if (Math.abs(df) > _120) {\n    var f2old = f2,\n      x2old = x2,\n      y2old = y2;\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2);\n    y2 = cy + ry * Math.sin(f2);\n    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  var c1 = Math.cos(f1),\n    s1 = Math.sin(f1),\n    c2 = Math.cos(f2),\n    s2 = Math.sin(f2),\n    t = Math.tan(df / 4),\n    hx = 4 / 3 * rx * t,\n    hy = 4 / 3 * ry * t,\n    m1 = [x1, y1],\n    m2 = [x1 + hx * s1, y1 - hy * c1],\n    m3 = [x2 + hx * s2, y2 - hy * c2],\n    m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  } else {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n    for (var i = 0, ii = res.length; i < ii; i++) {\n      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n    }\n    return newres;\n  }\n}\n\nfunction path2curve (path, path2) {\n  var pth = !path2 && paths(path);\n\n  if (!path2 && pth.curve) {\n    return pathClone(pth.curve);\n  }\n\n  var p = pathToAbsolute(path);\n  var p2 = path2 && pathToAbsolute(path2);\n  var attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null};\n  var attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null};\n\n  var processPath = function (path, d, pcom) {\n    var nx, ny;\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n    !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n      case 'A':\n        path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n        break;\n      case 'S':\n        if (pcom == 'C' || pcom == 'S') { // In \"S\" case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx;          // And reflect the previous\n          ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n        } else {                            // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n        path = ['C', nx, ny].concat(path.slice(1));\n        break;\n      case 'T':\n        if (pcom == 'Q' || pcom == 'T') { // In \"T\" case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n          d.qy = d.y * 2 - d.qy;        // to case \"S\".\n        } else {                            // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n        path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n        break;\n      case 'Q':\n        d.qx = path[1];\n        d.qy = path[2];\n        path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n        break;\n      case 'L':\n        path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));\n        break;\n      case 'H':\n        path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));\n        break;\n      case 'V':\n        path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));\n        break;\n      case 'Z':\n        path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));\n        break;\n    }\n    return path;\n  };\n\n  var fixArc = function (pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      var pi = pp[i];\n      while (pi.length) {\n        pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved\n        p2 && (pcoms2[i] = 'A'); // the same as above\n        pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n      }\n      pp.splice(i, 1);\n      ii = Math.max(p.length, p2 && p2.length || 0);\n    }\n  };\n\n  var fixM = function (path1, path2, a1, a2, i) {\n    if (path1 && path2 && path1[i][0] == 'M' && path2[i][0] != 'M') {\n      path2.splice(i, 0, ['M', a2.x, a2.y]);\n      a1.bx = 0;\n      a1.by = 0;\n      a1.x = path1[i][1];\n      a1.y = path1[i][2];\n      ii = Math.max(p.length, p2 && p2.length || 0);\n    }\n  };\n\n  var pcoms1 = []; // path commands of original path p\n  var pcoms2 = []; // path commands of original path p2\n  var pfirst = ''; // temporary holder for original path command\n  var pcom = ''; // holder for previous path command of original path\n\n  for (var i = 0, ii = Math.max(p.length, p2 && p2.length || 0); i < ii; i++) {\n    p[i] && (pfirst = p[i][0]); // save current path command\n\n    if (pfirst != 'C') { // C is not saved yet, because it may be result of conversion\n      pcoms1[i] = pfirst; // Save current path command\n      i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n    }\n    p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n    if (pcoms1[i] != 'A' && pfirst == 'C') pcoms1[i] = 'C'; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n    if (p2) { // the same procedures is done to p2\n      p2[i] && (pfirst = p2[i][0]);\n      if (pfirst != 'C') {\n        pcoms2[i] = pfirst;\n        i && (pcom = pcoms2[i - 1]);\n      }\n      p2[i] = processPath(p2[i], attrs2, pcom);\n\n      if (pcoms2[i] != 'A' && pfirst == 'C') {\n        pcoms2[i] = 'C';\n      }\n\n      fixArc(p2, i);\n    }\n\n    fixM(p, p2, attrs, attrs2, i);\n    fixM(p2, p, attrs2, attrs, i);\n\n    var seg = p[i];\n    var seg2 = p2 && p2[i];\n    var seglen = seg.length;\n    var seg2len = p2 && seg2.length;\n\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n    attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);\n    attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);\n    attrs2.x = p2 && seg2[seg2len - 2];\n    attrs2.y = p2 && seg2[seg2len - 1];\n  }\n\n  if (!p2) {\n    pth.curve = pathClone(p);\n  }\n  return p2 ? [p, p2] : p;\n}\n\n// http://schepers.cc/getting-to-the-point\nfunction catmullRom2bezier (crp, z) {\n  var d = [];\n\n  for (var i = 0, c = crp.length; c - 2 * !z > i; i += 2) {\n    var p = [\n      {x: +crp[i - 2], y: +crp[i - 1]},\n      {x: +crp[i], y: +crp[i + 1]},\n      {x: +crp[i + 2], y: +crp[i + 3]},\n      {x: +crp[i + 4], y: +crp[i + 5]},\n    ];\n\n    if (z) {\n      if (!i) {\n        p[0] = {x: +crp[c - 2], y: +crp[c - 1]};\n      } else if (c - 4 == i) {\n        p[3] = {x: +crp[0], y: +crp[1]};\n      } else if (c - 2 == i) {\n        p[2] = {x: +crp[0], y: +crp[1]};\n        p[3] = {x: +crp[2], y: +crp[3]};\n      }\n    } else {\n      if (c - 4 == i) {\n        p[3] = p[2];\n      } else if (!i) {\n        p[0] = {x: +crp[i], y: +crp[i + 1]};\n      }\n    }\n\n    d.push(['C',\n      (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n      (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n      (p[1].x + 6 * p[2].x - p[3].x) / 6,\n      (p[1].y + 6 * p[2].y - p[3].y) / 6,\n      p[2].x,\n      p[2].y,\n    ]);\n  }\n\n  return d;\n}\n\nconst pointInSvgPath = (path, x, y) => {\n  const bbox = pathBBox(path);\n\n  if (!isPointInsideBBox(bbox, x, y)) {\n    return false;\n  }\n\n  if (interPathHelper(path, [['M', x, y], ['H', bbox.x2 + 10]], 1) % 2 !== 1) {\n    return false;\n  }\n\n  return true;\n};\n\nconst getPointsAndIntersectingPaths = (paths, points) => {\n  const pathBBoxes = paths.map(({id, data}) => ({id, data, bbox: pathBBox(data)}))\n\n  return points.map(({id: pointId, x, y}) => {\n    const intersectingPathIds = pathBBoxes.filter(({data, bbox}) => {\n      if (!isPointInsideBBox(bbox, x, y)) {\n        return false;\n      }\n\n      if (interPathHelper(data, [['M', x, y], ['H', bbox.x2 + 10]], 1) % 2 !== 1) {\n        return false;\n      }\n\n      return true\n    })\n      .map(({id}) => id)\n    return {pointId, x, y, intersectingPathIds}\n  })\n};\n\nmodule.exports = {\n  pointInSvgPath,\n  getPointsAndIntersectingPaths,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37365\n")}}]);