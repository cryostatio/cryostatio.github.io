"use strict";(self.webpackChunkcryostat_web=self.webpackChunkcryostat_web||[]).push([[8453],{2494:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": () => (/* binding */ treeChanges)\n});\n\n// EXTERNAL MODULE: ./node_modules/@gilbarbara/deep-equal/esm/index.js + 1 modules\nvar esm = __webpack_require__(56431);\n// EXTERNAL MODULE: ./node_modules/is-lite/esm/index.js\nvar is_lite_esm = __webpack_require__(86944);\n;// CONCATENATED MODULE: ./node_modules/tree-changes/esm/helpers.js\n\n\nfunction canHaveLength() {\n    var arguments_ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arguments_[_i] = arguments[_i];\n    }\n    return arguments_.every(function (d) { return is_lite_esm/* default.string */.Z.string(d) || is_lite_esm/* default.array */.Z.array(d) || is_lite_esm/* default.plainObject */.Z.plainObject(d); });\n}\nfunction checkEquality(left, right, value) {\n    if (!isSameType(left, right)) {\n        return false;\n    }\n    if ([left, right].every(is_lite_esm/* default.array */.Z.array)) {\n        return !left.some(hasValue(value)) && right.some(hasValue(value));\n    }\n    /* istanbul ignore else */\n    if ([left, right].every(is_lite_esm/* default.plainObject */.Z.plainObject)) {\n        return (!Object.entries(left).some(hasEntry(value)) && Object.entries(right).some(hasEntry(value)));\n    }\n    return right === value;\n}\nfunction compareNumbers(previousData, data, options) {\n    var actual = options.actual, key = options.key, previous = options.previous, type = options.type;\n    var left = nested(previousData, key);\n    var right = nested(data, key);\n    var changed = [left, right].every(is_lite_esm/* default.number */.Z.number) && (type === 'increased' ? left < right : left > right);\n    if (!is_lite_esm/* default.undefined */.Z.undefined(actual)) {\n        changed = changed && right === actual;\n    }\n    if (!is_lite_esm/* default.undefined */.Z.undefined(previous)) {\n        changed = changed && left === previous;\n    }\n    return changed;\n}\nfunction compareValues(previousData, data, options) {\n    var key = options.key, type = options.type, value = options.value;\n    var left = nested(previousData, key);\n    var right = nested(data, key);\n    var primary = type === 'added' ? left : right;\n    var secondary = type === 'added' ? right : left;\n    // console.log({ primary, secondary });\n    if (!is_lite_esm/* default.nullOrUndefined */.Z.nullOrUndefined(value)) {\n        if (is_lite_esm/* default.defined */.Z.defined(primary)) {\n            // check if nested data matches\n            if (is_lite_esm/* default.array */.Z.array(primary) || is_lite_esm/* default.plainObject */.Z.plainObject(primary)) {\n                return checkEquality(primary, secondary, value);\n            }\n        }\n        else {\n            return (0,esm/* default */.Z)(secondary, value);\n        }\n        return false;\n    }\n    if ([left, right].every(is_lite_esm/* default.array */.Z.array)) {\n        return !secondary.every(isEqualPredicate(primary));\n    }\n    if ([left, right].every(is_lite_esm/* default.plainObject */.Z.plainObject)) {\n        return hasExtraKeys(Object.keys(primary), Object.keys(secondary));\n    }\n    return (![left, right].every(function (d) { return is_lite_esm/* default.primitive */.Z.primitive(d) && is_lite_esm/* default.defined */.Z.defined(d); }) &&\n        (type === 'added'\n            ? !is_lite_esm/* default.defined */.Z.defined(left) && is_lite_esm/* default.defined */.Z.defined(right)\n            : is_lite_esm/* default.defined */.Z.defined(left) && !is_lite_esm/* default.defined */.Z.defined(right)));\n}\nfunction getIterables(previousData, data, _a) {\n    var _b = _a === void 0 ? {} : _a, key = _b.key;\n    var left = nested(previousData, key);\n    var right = nested(data, key);\n    if (!isSameType(left, right)) {\n        throw new TypeError('Inputs have different types');\n    }\n    if (!canHaveLength(left, right)) {\n        throw new TypeError(\"Inputs don't have length\");\n    }\n    if ([left, right].every(is_lite_esm/* default.plainObject */.Z.plainObject)) {\n        left = Object.keys(left);\n        right = Object.keys(right);\n    }\n    return [left, right];\n}\nfunction hasEntry(input) {\n    return function (_a) {\n        var key = _a[0], value = _a[1];\n        if (is_lite_esm/* default.array */.Z.array(input)) {\n            return ((0,esm/* default */.Z)(input, value) ||\n                input.some(function (d) { return (0,esm/* default */.Z)(d, value) || (is_lite_esm/* default.array */.Z.array(value) && isEqualPredicate(value)(d)); }));\n        }\n        /* istanbul ignore else */\n        if (is_lite_esm/* default.plainObject */.Z.plainObject(input) && input[key]) {\n            return !!input[key] && (0,esm/* default */.Z)(input[key], value);\n        }\n        return (0,esm/* default */.Z)(input, value);\n    };\n}\nfunction hasExtraKeys(left, right) {\n    return right.some(function (d) { return !left.includes(d); });\n}\nfunction hasValue(input) {\n    return function (value) {\n        if (is_lite_esm/* default.array */.Z.array(input)) {\n            return input.some(function (d) { return (0,esm/* default */.Z)(d, value) || (is_lite_esm/* default.array */.Z.array(value) && isEqualPredicate(value)(d)); });\n        }\n        return (0,esm/* default */.Z)(input, value);\n    };\n}\nfunction includesOrEqualsTo(previousValue, value) {\n    return is_lite_esm/* default.array */.Z.array(previousValue)\n        ? previousValue.some(function (d) { return (0,esm/* default */.Z)(d, value); })\n        : (0,esm/* default */.Z)(previousValue, value);\n}\nfunction isEqualPredicate(data) {\n    return function (value) { return data.some(function (d) { return (0,esm/* default */.Z)(d, value); }); };\n}\nfunction isSameType() {\n    var arguments_ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arguments_[_i] = arguments[_i];\n    }\n    return (arguments_.every(is_lite_esm/* default.array */.Z.array) ||\n        arguments_.every(is_lite_esm/* default.number */.Z.number) ||\n        arguments_.every(is_lite_esm/* default.plainObject */.Z.plainObject) ||\n        arguments_.every(is_lite_esm/* default.string */.Z.string));\n}\nfunction nested(data, property) {\n    /* istanbul ignore else */\n    if (is_lite_esm/* default.plainObject */.Z.plainObject(data) || is_lite_esm/* default.array */.Z.array(data)) {\n        /* istanbul ignore else */\n        if (is_lite_esm/* default.string */.Z.string(property)) {\n            var props = property.split('.');\n            return props.reduce(function (acc, d) { return acc && acc[d]; }, data);\n        }\n        /* istanbul ignore else */\n        if (is_lite_esm/* default.number */.Z.number(property)) {\n            return data[property];\n        }\n        return data;\n    }\n    return data;\n}\n//# sourceMappingURL=helpers.js.map\n;// CONCATENATED MODULE: ./node_modules/tree-changes/esm/index.js\n\n\n\nfunction treeChanges(previousData, data) {\n    if ([previousData, data].some(is_lite_esm/* default.nullOrUndefined */.Z.nullOrUndefined)) {\n        throw new Error('Missing required parameters');\n    }\n    if (![previousData, data].every(function (d) { return is_lite_esm/* default.plainObject */.Z.plainObject(d) || is_lite_esm/* default.array */.Z.array(d); })) {\n        throw new Error('Expected plain objects or array');\n    }\n    var added = function (key, value) {\n        try {\n            return compareValues(previousData, data, { key: key, type: 'added', value: value });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var changed = function (key, actual, previous) {\n        try {\n            var left = nested(previousData, key);\n            var right = nested(data, key);\n            var hasActual = is_lite_esm/* default.defined */.Z.defined(actual);\n            var hasPrevious = is_lite_esm/* default.defined */.Z.defined(previous);\n            if (hasActual || hasPrevious) {\n                var leftComparator = hasPrevious\n                    ? includesOrEqualsTo(previous, left)\n                    : !includesOrEqualsTo(actual, left);\n                var rightComparator = includesOrEqualsTo(actual, right);\n                return leftComparator && rightComparator;\n            }\n            if ([left, right].every(is_lite_esm/* default.array */.Z.array) || [left, right].every(is_lite_esm/* default.plainObject */.Z.plainObject)) {\n                return !(0,esm/* default */.Z)(left, right);\n            }\n            return left !== right;\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var changedFrom = function (key, previous, actual) {\n        if (!is_lite_esm/* default.defined */.Z.defined(key)) {\n            return false;\n        }\n        try {\n            var left = nested(previousData, key);\n            var right = nested(data, key);\n            var hasActual = is_lite_esm/* default.defined */.Z.defined(actual);\n            return (includesOrEqualsTo(previous, left) &&\n                (hasActual ? includesOrEqualsTo(actual, right) : !hasActual));\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    /**\n     * @deprecated\n     * Use \"changed\" instead\n     */\n    var changedTo = function (key, actual) {\n        if (!is_lite_esm/* default.defined */.Z.defined(key)) {\n            return false;\n        }\n        /* istanbul ignore next */\n        if (false) {}\n        return changed(key, actual);\n    };\n    var decreased = function (key, actual, previous) {\n        if (!is_lite_esm/* default.defined */.Z.defined(key)) {\n            return false;\n        }\n        try {\n            return compareNumbers(previousData, data, { key: key, actual: actual, previous: previous, type: 'decreased' });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var emptied = function (key) {\n        try {\n            var _a = getIterables(previousData, data, { key: key }), left = _a[0], right = _a[1];\n            return !!left.length && !right.length;\n        }\n        catch (_b) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var filled = function (key) {\n        try {\n            var _a = getIterables(previousData, data, { key: key }), left = _a[0], right = _a[1];\n            return !left.length && !!right.length;\n        }\n        catch (_b) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var increased = function (key, actual, previous) {\n        if (!is_lite_esm/* default.defined */.Z.defined(key)) {\n            return false;\n        }\n        try {\n            return compareNumbers(previousData, data, { key: key, actual: actual, previous: previous, type: 'increased' });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var removed = function (key, value) {\n        try {\n            return compareValues(previousData, data, { key: key, type: 'removed', value: value });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    return { added: added, changed: changed, changedFrom: changedFrom, changedTo: changedTo, decreased: decreased, emptied: emptied, filled: filled, increased: increased, removed: removed };\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2494\n")}}]);