"use strict";(self.webpackChunkcryostat_web=self.webpackChunkcryostat_web||[]).push([[8095],{73091:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "E": () => (/* binding */ VictoryAxis)\n});\n\n// EXTERNAL MODULE: ./node_modules/lodash/isEmpty.js\nvar isEmpty = __webpack_require__(41609);\nvar isEmpty_default = /*#__PURE__*/__webpack_require__.n(isEmpty);\n// EXTERNAL MODULE: ./node_modules/lodash/assign.js\nvar lodash_assign = __webpack_require__(28583);\nvar assign_default = /*#__PURE__*/__webpack_require__.n(lodash_assign);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(45697);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/axis.js\nvar victory_util_axis = __webpack_require__(92555);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/textsize.js\nvar textsize = __webpack_require__(82254);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/user-props.js\nvar user_props = __webpack_require__(80450);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/common-props.js\nvar common_props = __webpack_require__(5734);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/prop-types.js\nvar victory_util_prop_types = __webpack_require__(99733);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-primitives/line-segment.js + 1 modules\nvar line_segment = __webpack_require__(85287);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-label/victory-label.js + 2 modules\nvar victory_label = __webpack_require__(41248);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-theme/victory-theme.js + 2 modules\nvar victory_theme = __webpack_require__(6673);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-container/victory-container.js + 1 modules\nvar victory_container = __webpack_require__(3532);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/add-events.js + 3 modules\nvar add_events = __webpack_require__(73247);\n// EXTERNAL MODULE: ./node_modules/lodash/defaults.js\nvar defaults = __webpack_require__(91747);\nvar defaults_default = /*#__PURE__*/__webpack_require__.n(defaults);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/scale.js\nvar victory_util_scale = __webpack_require__(74765);\n// EXTERNAL MODULE: ./node_modules/victory-core/es/victory-util/helpers.js\nvar helpers = __webpack_require__(95302);\n;// CONCATENATED MODULE: ./node_modules/victory-axis/es/helper-methods.js\n\n\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar orientationSign = {\n  top: -1,\n  left: -1,\n  right: 1,\n  bottom: 1\n};\n\nvar exists = function (val) {\n  return val !== null && val !== undefined;\n};\n\nvar getCurrentAxis = function (props, axis) {\n  var orientation = props.orientation,\n      horizontal = props.horizontal;\n\n  if (orientation) {\n    var dimensions = {\n      top: "x",\n      bottom: "x",\n      left: "y",\n      right: "y"\n    };\n    return dimensions[orientation];\n  }\n\n  var otherAxis = axis === "x" ? "y" : "x";\n  return horizontal ? otherAxis : axis;\n};\n\nvar getScale = function (props) {\n  var axis = victory_util_axis/* getAxis */.dd(props);\n  var currentAxis = getCurrentAxis(props, axis);\n  var scale = victory_util_scale/* getBaseScale */.q8(props, axis);\n  var propsDomain = props.domain && props.domain[axis];\n  var domain = propsDomain || victory_util_axis/* getDomain */.ge(props) || scale.domain();\n  scale.range(helpers/* getRange */.rx(props, currentAxis));\n  scale.domain(domain);\n  return scale;\n};\n\nvar getStyleObject = function (props) {\n  var theme = props.theme,\n      dependentAxis = props.dependentAxis;\n  var generalAxisStyle = theme && theme.axis && theme.axis.style;\n  var axisType = dependentAxis ? "dependentAxis" : "independentAxis";\n  var specificAxisStyle = theme && theme[axisType] && theme[axisType].style;\n\n  var mergeStyles = function () {\n    var styleNamespaces = ["axis", "axisLabel", "grid", "parent", "tickLabels", "ticks"];\n    return styleNamespaces.reduce(function (memo, curr) {\n      memo[curr] = defaults_default()({}, specificAxisStyle[curr], generalAxisStyle[curr]);\n      return memo;\n    }, {});\n  };\n\n  return generalAxisStyle && specificAxisStyle ? mergeStyles() : specificAxisStyle || generalAxisStyle;\n};\n\nvar getStyles = function (props, styleObject) {\n  var style = props.style || {};\n  styleObject = styleObject || {};\n  var parentStyleProps = {\n    height: "100%",\n    width: "100%"\n  };\n  return {\n    parent: defaults_default()(style.parent, styleObject.parent, parentStyleProps),\n    axis: defaults_default()({}, style.axis, styleObject.axis),\n    axisLabel: defaults_default()({}, style.axisLabel, styleObject.axisLabel),\n    grid: defaults_default()({}, style.grid, styleObject.grid),\n    ticks: defaults_default()({}, style.ticks, styleObject.ticks),\n    tickLabels: defaults_default()({}, style.tickLabels, styleObject.tickLabels)\n  };\n};\n\nvar getTickProps = function (layout, style, datum) {\n  var position = layout.position,\n      transform = layout.transform;\n  return {\n    x1: transform.x,\n    y1: transform.y,\n    x2: transform.x + position.x2,\n    y2: transform.y + position.y2,\n    style: style,\n    datum: datum\n  };\n}; // eslint-disable-next-line max-params\n\n\nvar getTickLabelProps = function (layout, style, anchors, datum, text) {\n  var position = layout.position,\n      transform = layout.transform;\n  return {\n    style: style,\n    x: transform.x + position.x,\n    y: transform.y + position.y,\n    verticalAnchor: anchors.verticalAnchor,\n    textAnchor: anchors.textAnchor,\n    angle: style.angle,\n    text: text,\n    datum: datum\n  };\n};\n\nvar getGridProps = function (layout, style, datum) {\n  var edge = layout.edge,\n      transform = layout.transform;\n  return {\n    x1: transform.x,\n    y1: transform.y,\n    x2: edge.x + transform.x,\n    y2: edge.y + transform.y,\n    style: style,\n    datum: datum\n  };\n};\n\nvar getAxisProps = function (modifiedProps, calculatedValues, globalTransform) {\n  var style = calculatedValues.style,\n      padding = calculatedValues.padding,\n      isVertical = calculatedValues.isVertical;\n  var width = modifiedProps.width,\n      height = modifiedProps.height;\n  return {\n    style: style.axis,\n    x1: isVertical ? globalTransform.x : padding.left + globalTransform.x,\n    x2: isVertical ? globalTransform.x : width - padding.right + globalTransform.x,\n    y1: isVertical ? padding.top + globalTransform.y : globalTransform.y,\n    y2: isVertical ? height - padding.bottom + globalTransform.y : globalTransform.y\n  };\n};\n\nvar getEvaluatedStyles = function (style, props) {\n  return {\n    tickStyle: helpers/* evaluateStyle */.F3(style.ticks, props),\n    labelStyle: helpers/* evaluateStyle */.F3(style.tickLabels, props),\n    gridStyle: helpers/* evaluateStyle */.F3(style.grid, props)\n  };\n};\n\nvar getAxisLabelProps = function (props, calculatedValues, globalTransform) {\n  var style = calculatedValues.style,\n      orientation = calculatedValues.orientation,\n      padding = calculatedValues.padding,\n      labelPadding = calculatedValues.labelPadding,\n      isVertical = calculatedValues.isVertical;\n  var sign = orientationSign[orientation];\n  var hPadding = padding.left + padding.right;\n  var vPadding = padding.top + padding.bottom;\n  var verticalAnchor = sign < 0 ? "end" : "start";\n  var labelStyle = style.axisLabel;\n  var angle = isVertical ? -90 : 0; // eslint-disable-line no-magic-numbers\n\n  var x = isVertical ? globalTransform.x + sign * labelPadding : (props.width - hPadding) / 2 + padding.left + globalTransform.x;\n  var y = isVertical ? (props.height - vPadding) / 2 + padding.top + globalTransform.y : sign * labelPadding + globalTransform.y;\n  return {\n    x: x,\n    y: y,\n    verticalAnchor: labelStyle.verticalAnchor || verticalAnchor,\n    textAnchor: labelStyle.textAnchor || "middle",\n    angle: labelStyle.angle === undefined ? angle : labelStyle.angle,\n    style: labelStyle,\n    text: props.label\n  };\n};\n\nvar getAnchors = function (orientation, isVertical) {\n  var anchorOrientation = {\n    top: "end",\n    left: "end",\n    right: "start",\n    bottom: "start"\n  };\n  var anchor = anchorOrientation[orientation];\n  return {\n    textAnchor: isVertical ? anchor : "middle",\n    verticalAnchor: isVertical ? "middle" : anchor\n  };\n};\n\nvar getLabelPadding = function (props, style) {\n  var labelStyle = style.axisLabel || {};\n\n  if (labelStyle.padding !== undefined && labelStyle.padding !== null) {\n    return labelStyle.padding;\n  }\n\n  var isVertical = victory_util_axis/* isVertical */.cp(props); // TODO: magic numbers\n\n  /* eslint-disable no-magic-numbers*/\n\n  var fontSize = labelStyle.fontSize || 14;\n  return props.label ? fontSize * (isVertical ? 2.3 : 1.6) : 0;\n  /* eslint-enable no-magic-numbers*/\n};\n\nvar getDefaultOrientations = function (axis, originSign, horizontal) {\n  var sign = originSign || "positive";\n  var orientations = {\n    positive: {\n      x: "bottom",\n      y: "left"\n    },\n    negative: {\n      x: "top",\n      y: "right"\n    }\n  };\n  var horizontalOrientations = {\n    positive: {\n      x: "left",\n      y: "bottom"\n    },\n    negative: {\n      x: "right",\n      y: "top"\n    }\n  };\n  return horizontal ? horizontalOrientations[sign][axis] : orientations[sign][axis];\n};\n\nvar getStandaloneOffset = function (props, calculatedValues) {\n  var style = calculatedValues.style,\n      scale = calculatedValues.scale,\n      orientation = calculatedValues.orientation,\n      padding = calculatedValues.padding,\n      axis = calculatedValues.axis,\n      ticks = calculatedValues.ticks,\n      stringTicks = calculatedValues.stringTicks,\n      isVertical = calculatedValues.isVertical,\n      labelPadding = calculatedValues.labelPadding;\n  var polar = props.polar,\n      horizontal = props.horizontal;\n  var sharedProps = {\n    scale: _defineProperty({}, axis, scale),\n    polar: polar,\n    horizontal: horizontal,\n    ticks: ticks,\n    stringTicks: stringTicks\n  };\n  var xPadding = orientation === "right" ? padding.right : padding.left;\n  var yPadding = orientation === "top" ? padding.top : padding.bottom;\n  var offsetX = props.offsetX !== null && props.offsetX !== undefined ? props.offsetX : xPadding;\n  var offsetY = props.offsetY !== null && props.offsetY !== undefined ? props.offsetY : yPadding;\n  var fontSize = style.axisLabel.fontSize || 14; // eslint-disable-line no-magic-numbers\n\n  var tickSizes = ticks.map(function (data, index) {\n    var tick = stringTicks ? props.tickValues[data - 1] : data;\n    var tickStyle = helpers/* evaluateStyle */.F3(style.ticks, assign_default()({}, sharedProps, {\n      tick: tick,\n      index: index\n    }));\n    return tickStyle.size || 0;\n  });\n  var totalPadding = fontSize + 2 * Math.max.apply(Math, _toConsumableArray(tickSizes)) + labelPadding;\n  var minimumPadding = 1.2 * fontSize; // eslint-disable-line no-magic-numbers\n\n  var x = isVertical ? totalPadding : minimumPadding;\n  var y = isVertical ? minimumPadding : totalPadding;\n  return {\n    x: offsetX !== null && offsetX !== undefined ? offsetX : x,\n    y: offsetY !== null && offsetY !== undefined ? offsetY : y\n  };\n}; // eslint-disable-next-line complexity\n\n\nvar getOffset = function (props, calculatedValues) {\n  var scale = calculatedValues.scale,\n      origin = calculatedValues.origin,\n      orientation = calculatedValues.orientation,\n      orientations = calculatedValues.orientations,\n      domain = calculatedValues.domain,\n      padding = calculatedValues.padding;\n  var top = padding.top,\n      bottom = padding.bottom,\n      left = padding.left,\n      right = padding.right;\n  var calculatedOrientation = {\n    x: orientation === "bottom" || orientation === "top" ? orientation : orientations.x,\n    y: orientation === "left" || orientation === "right" ? orientation : orientations.y\n  }; // make the axes line up, and cross when appropriate\n\n  var orientationOffset = {\n    x: calculatedOrientation.y === "left" ? left : right,\n    y: calculatedOrientation.x === "bottom" ? bottom : top\n  };\n  var originOffset = {\n    x: calculatedOrientation.y === "left" ? 0 : props.width,\n    y: calculatedOrientation.x === "bottom" ? props.height : 0\n  };\n  var originPosition = {\n    x: origin.x === domain.x[0] || origin.x === domain.x[1] ? 0 : scale.x(origin.x),\n    y: origin.y === domain.y[0] || origin.y === domain.y[1] ? 0 : scale.y(origin.y)\n  };\n  var x = originPosition.x ? Math.abs(originOffset.x - originPosition.x) : orientationOffset.x;\n  var y = originPosition.y ? Math.abs(originOffset.y - originPosition.y) : orientationOffset.y;\n  var offsetX = exists(props.offsetX) ? props.offsetX : x;\n  var offsetY = exists(props.offsetY) ? props.offsetY : y;\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n}; // eslint-disable-next-line complexity\n\n\nvar getHorizontalOffset = function (props, calculatedValues) {\n  var scale = calculatedValues.scale,\n      origin = calculatedValues.origin,\n      orientation = calculatedValues.orientation,\n      orientations = calculatedValues.orientations,\n      domain = calculatedValues.domain,\n      padding = calculatedValues.padding;\n  var top = padding.top,\n      bottom = padding.bottom,\n      left = padding.left,\n      right = padding.right;\n  var calculatedOrientation = {\n    y: orientation === "bottom" || orientation === "top" ? orientation : orientations.x,\n    x: orientation === "left" || orientation === "right" ? orientation : orientations.y\n  }; // make the axes line up, and cross when appropriate\n\n  var orientationOffset = {\n    x: calculatedOrientation.y === "bottom" ? bottom : top,\n    y: calculatedOrientation.x === "left" ? left : right\n  };\n  var originOffset = {\n    y: calculatedOrientation.x === "left" ? 0 : props.width,\n    x: calculatedOrientation.y === "bottom" ? props.height : 0\n  };\n  var originPosition = {\n    x: origin.x === domain.x[0] || origin.x === domain.x[1] ? 0 : scale.x(origin.x),\n    y: origin.y === domain.y[0] || origin.y === domain.y[1] ? 0 : scale.y(origin.y)\n  };\n  var y = originPosition.x ? Math.abs(originOffset.x - originPosition.x) : orientationOffset.x;\n  var x = originPosition.y ? Math.abs(originOffset.y - originPosition.y) : orientationOffset.y;\n  var offsetX = exists(props.offsetX) ? props.offsetX : x;\n  var offsetY = exists(props.offsetY) ? props.offsetY : y;\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n};\n\nvar getTransform = function (props, calculatedValues, offset) {\n  var orientation = calculatedValues.orientation,\n      axis = calculatedValues.axis;\n  var axisValue = victory_util_axis/* getAxisValue */.w5(props, axis);\n  return {\n    top: {\n      x: 0,\n      y: axisValue !== undefined ? axisValue : offset.y\n    },\n    bottom: {\n      x: 0,\n      y: axisValue !== undefined ? axisValue : props.height - offset.y\n    },\n    left: {\n      x: axisValue !== undefined ? axisValue : offset.x,\n      y: 0\n    },\n    right: {\n      x: axisValue !== undefined ? axisValue : props.width - offset.x,\n      y: 0\n    }\n  }[orientation];\n};\n\nvar getTickPosition = function (style, orientation, isVertical) {\n  var tickStyle = style.tickStyle,\n      labelStyle = style.labelStyle;\n  var size = tickStyle.size || 0;\n  var tickPadding = tickStyle.padding || 0;\n  var labelPadding = labelStyle.padding || 0;\n  var tickSpacing = size + tickPadding + labelPadding;\n  var sign = orientationSign[orientation];\n  return {\n    x: isVertical ? sign * tickSpacing : 0,\n    x2: isVertical ? sign * size : 0,\n    y: isVertical ? 0 : sign * tickSpacing,\n    y2: isVertical ? 0 : sign * size\n  };\n};\n\nvar getTickTransform = function (tick, globalTransform, isVertical) {\n  return {\n    x: isVertical ? globalTransform.x : tick + globalTransform.x,\n    y: isVertical ? tick + globalTransform.y : globalTransform.y\n  };\n};\n\nvar getGridEdge = function (props, calculatedValues) {\n  var orientation = calculatedValues.orientation,\n      padding = calculatedValues.padding,\n      isVertical = calculatedValues.isVertical;\n  var sign = -orientationSign[orientation];\n  var x = isVertical ? sign * (props.width - (padding.left + padding.right)) : 0;\n  var y = isVertical ? 0 : sign * (props.height - (padding.top + padding.bottom));\n  return {\n    x: x,\n    y: y\n  };\n};\n\nvar getGridOffset = function (calculatedValues, offset) {\n  var padding = calculatedValues.padding,\n      orientation = calculatedValues.orientation,\n      crossAxis = calculatedValues.crossAxis;\n  var xPadding = orientation === "right" ? padding.right : padding.left;\n  var yPadding = orientation === "top" ? padding.top : padding.bottom;\n  return {\n    x: crossAxis ? offset.x - xPadding : 0,\n    y: crossAxis ? offset.y - yPadding : 0\n  };\n};\n\nvar getLayoutProps = function (modifiedProps, calculatedValues) {\n  var offset;\n\n  if (calculatedValues.domain.x && calculatedValues.domain.y) {\n    offset = modifiedProps.horizontal ? getHorizontalOffset(modifiedProps, calculatedValues) : getOffset(modifiedProps, calculatedValues);\n  } else {\n    offset = getStandaloneOffset(modifiedProps, calculatedValues);\n  }\n\n  return {\n    globalTransform: getTransform(modifiedProps, calculatedValues, offset),\n    gridOffset: getGridOffset(calculatedValues, offset),\n    gridEdge: getGridEdge(modifiedProps, calculatedValues)\n  };\n};\n\nvar getOrientation = function (props) {\n  if (props.orientation) {\n    return props.orientation;\n  }\n\n  var defaultOrientations = {\n    dependent: props.horizontal ? "bottom" : "left",\n    independent: props.horizontal ? "left" : "bottom"\n  };\n  return props.dependentAxis ? defaultOrientations.dependent : defaultOrientations.independent;\n}; // eslint-disable-next-line complexity\n\n\nvar getCalculatedValues = function (props) {\n  var defaultStyles = getStyleObject(props);\n  var style = getStyles(props, defaultStyles);\n  var padding = helpers/* getPadding */.tQ(props);\n  var labelPadding = getLabelPadding(props, style);\n  var stringTicks = victory_util_axis/* stringTicks */.kM(props) ? props.tickValues : undefined;\n  var axis = victory_util_axis/* getAxis */.dd(props);\n  var axisDomain = victory_util_axis/* getDomain */.ge(props);\n  var axisScale = getScale(props);\n  var xAxisDomain = axis === "x" ? axisDomain : undefined;\n  var yAxisDomain = axis === "y" ? axisDomain : undefined;\n  var xAxisScale = axis === "x" ? axisScale : undefined;\n  var yAxisScale = axis === "y" ? axisScale : undefined;\n  var crossAxis = !(props.crossAxis === false || props.standalone === true);\n  var ticks = victory_util_axis/* getTicks */.fj(props, axisScale, crossAxis);\n  var tickFormat = victory_util_axis/* getTickFormat */.Js(props, axisScale);\n  var range = {\n    x: helpers/* getRange */.rx(props, "x"),\n    y: helpers/* getRange */.rx(props, "y")\n  }; // use full domain if passed in from parent,\n  // otherwise use the just the one axis available\n\n  var domain = {\n    x: props.domain && props.domain.x ? props.domain.x : xAxisDomain,\n    y: props.domain && props.domain.y ? props.domain.y : yAxisDomain\n  }; // use full scale if passed in from parent,\n  // otherwise use the just the one axis available\n\n  var scale = {\n    x: props.domain && props.domain.x ? victory_util_scale/* getBaseScale */.q8(props, "x").domain(props.domain.x).range(props.horizontal ? range.y : range.x) : xAxisScale,\n    y: props.domain && props.domain.y ? victory_util_scale/* getBaseScale */.q8(props, "y").domain(props.domain.y).range(props.horizontal ? range.x : range.y) : yAxisScale\n  };\n  var origin = domain.x && domain.y ? victory_util_axis/* getOrigin */.P$(domain) : undefined;\n  var originSign = origin ? {\n    x: victory_util_axis/* getOriginSign */.eE(origin.x, domain.x),\n    y: victory_util_axis/* getOriginSign */.eE(origin.y, domain.y)\n  } : undefined;\n  var orientations = originSign ? {\n    x: getDefaultOrientations("x", originSign.y, props.horizontal),\n    y: getDefaultOrientations("y", originSign.x, props.horizontal)\n  } : undefined;\n  var orientation = orientations ? props.orientation || orientations[axis] : getOrientation(props);\n  var isVertical = victory_util_axis/* isVertical */.cp(Object.assign({}, props, {\n    orientation: orientation\n  }));\n  var anchors = getAnchors(orientation, isVertical);\n  return {\n    anchors: anchors,\n    axis: axis,\n    crossAxis: crossAxis,\n    domain: domain,\n    isVertical: isVertical,\n    labelPadding: labelPadding,\n    orientation: orientation,\n    orientations: orientations,\n    origin: origin,\n    padding: padding,\n    scale: scale,\n    stringTicks: stringTicks,\n    style: style,\n    tickFormat: tickFormat,\n    ticks: ticks\n  };\n};\n\nvar getBaseProps = function (props, fallbackProps) {\n  props = victory_util_axis/* modifyProps */.TY(props, fallbackProps);\n  var calculatedValues = getCalculatedValues(props);\n  var axis = calculatedValues.axis,\n      style = calculatedValues.style,\n      orientation = calculatedValues.orientation,\n      isVertical = calculatedValues.isVertical,\n      scale = calculatedValues.scale,\n      ticks = calculatedValues.ticks,\n      tickFormat = calculatedValues.tickFormat,\n      anchors = calculatedValues.anchors,\n      domain = calculatedValues.domain,\n      stringTicks = calculatedValues.stringTicks;\n  var otherAxis = axis === "x" ? "y" : "x";\n  var _props = props,\n      width = _props.width,\n      height = _props.height,\n      standalone = _props.standalone,\n      theme = _props.theme,\n      polar = _props.polar,\n      padding = _props.padding,\n      horizontal = _props.horizontal;\n\n  var _getLayoutProps = getLayoutProps(props, calculatedValues),\n      globalTransform = _getLayoutProps.globalTransform,\n      gridOffset = _getLayoutProps.gridOffset,\n      gridEdge = _getLayoutProps.gridEdge;\n\n  var sharedProps = {\n    scale: _defineProperty({}, axis, scale[axis]),\n    polar: polar,\n    horizontal: horizontal,\n    ticks: ticks,\n    stringTicks: stringTicks\n  };\n  var axisProps = getAxisProps(props, calculatedValues, globalTransform);\n  var axisLabelProps = getAxisLabelProps(props, calculatedValues, globalTransform);\n  var initialChildProps = {\n    parent: assign_default()({\n      style: style.parent,\n      ticks: ticks,\n      standalone: standalone,\n      theme: theme,\n      width: width,\n      height: height,\n      padding: padding,\n      domain: domain\n    }, sharedProps)\n  };\n  var gridProps = {\n    dimension: otherAxis,\n    range: _defineProperty({}, otherAxis, helpers/* getRange */.rx(props, otherAxis)),\n    scale: props.scale && props.scale[otherAxis] ? _defineProperty({}, otherAxis, props.scale[otherAxis]) : undefined\n  };\n  return ticks.reduce(function (childProps, tickValue, index) {\n    var _scale$axis, _scale$axis2, _scale$axis3;\n\n    var tick = stringTicks ? stringTicks[index] : tickValue;\n    var text = tickFormat(tickValue, index, ticks);\n    var styles = getEvaluatedStyles(style, assign_default()({}, sharedProps, {\n      tick: tick,\n      tickValue: tickValue,\n      index: index,\n      text: text\n    }));\n    var tickLayout = {\n      position: getTickPosition(styles, orientation, isVertical),\n      transform: getTickTransform((_scale$axis = scale[axis]) === null || _scale$axis === void 0 ? void 0 : _scale$axis.call(scale, tickValue), globalTransform, isVertical)\n    };\n    var gridLayout = {\n      edge: gridEdge,\n      transform: {\n        x: isVertical ? -gridOffset.x + globalTransform.x : ((_scale$axis2 = scale[axis]) === null || _scale$axis2 === void 0 ? void 0 : _scale$axis2.call(scale, tickValue)) + globalTransform.x,\n        y: isVertical ? ((_scale$axis3 = scale[axis]) === null || _scale$axis3 === void 0 ? void 0 : _scale$axis3.call(scale, tickValue)) + globalTransform.y : gridOffset.y + globalTransform.y\n      }\n    };\n    childProps[index] = {\n      axis: assign_default()({\n        dimension: axis\n      }, sharedProps, axisProps),\n      axisLabel: assign_default()({}, sharedProps, axisLabelProps),\n      ticks: assign_default()({}, sharedProps, getTickProps(tickLayout, styles.tickStyle, tickValue)),\n      tickLabels: assign_default()({}, sharedProps, getTickLabelProps(tickLayout, styles.labelStyle, anchors, tickValue, text)),\n      grid: assign_default()({}, sharedProps, gridProps, getGridProps(gridLayout, styles.gridStyle, tickValue))\n    };\n    return childProps;\n  }, initialChildProps);\n};\n;// CONCATENATED MODULE: ./node_modules/victory-axis/es/victory-axis.js\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { victory_axis_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction victory_axis_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction victory_axis_toConsumableArray(arr) { return victory_axis_arrayWithoutHoles(arr) || victory_axis_iterableToArray(arr) || victory_axis_unsupportedIterableToArray(arr) || victory_axis_nonIterableSpread(); }\n\nfunction victory_axis_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction victory_axis_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return victory_axis_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return victory_axis_arrayLikeToArray(o, minLen); }\n\nfunction victory_axis_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction victory_axis_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return victory_axis_arrayLikeToArray(arr); }\n\nfunction victory_axis_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n};\nvar options = {\n  components: [{\n    name: "axis",\n    index: 0\n  }, {\n    name: "axisLabel",\n    index: 0\n  }, {\n    name: "grid"\n  }, {\n    name: "parent",\n    index: "parent"\n  }, {\n    name: "ticks"\n  }, {\n    name: "tickLabels"\n  }]\n};\n\nvar VictoryAxisBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(VictoryAxisBase, _React$Component);\n\n  var _super = _createSuper(VictoryAxisBase);\n\n  function VictoryAxisBase() {\n    _classCallCheck(this, VictoryAxisBase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VictoryAxisBase, [{\n    key: "renderLine",\n    value: function renderLine(props) {\n      var axisComponent = props.axisComponent;\n      var axisProps = this.getComponentProps(axisComponent, "axis", 0);\n      return /*#__PURE__*/react.cloneElement(axisComponent, axisProps);\n    }\n  }, {\n    key: "renderLabel",\n    value: function renderLabel(props) {\n      var axisLabelComponent = props.axisLabelComponent,\n          label = props.label;\n\n      if (!label) {\n        return null;\n      }\n\n      var axisLabelProps = this.getComponentProps(axisLabelComponent, "axisLabel", 0);\n      return /*#__PURE__*/react.cloneElement(axisLabelComponent, axisLabelProps);\n    }\n  }, {\n    key: "renderGridAndTicks",\n    value: function renderGridAndTicks(props) {\n      var _this = this;\n\n      var tickComponent = props.tickComponent,\n          tickLabelComponent = props.tickLabelComponent,\n          gridComponent = props.gridComponent,\n          name = props.name;\n\n      var shouldRender = function (componentProps) {\n        var _componentProps$style = componentProps.style,\n            style = _componentProps$style === void 0 ? {} : _componentProps$style,\n            _componentProps$event = componentProps.events,\n            events = _componentProps$event === void 0 ? {} : _componentProps$event;\n        var visible = style.stroke !== "transparent" && style.stroke !== "none" && style.strokeWidth !== 0;\n        return visible || !isEmpty_default()(events);\n      };\n\n      return this.dataKeys.map(function (key, index) {\n        var tickProps = _this.getComponentProps(tickComponent, "ticks", index);\n\n        var BaseTickComponent = /*#__PURE__*/react.cloneElement(tickComponent, tickProps);\n        var TickComponent = shouldRender(BaseTickComponent.props) ? BaseTickComponent : undefined;\n\n        var gridProps = _this.getComponentProps(gridComponent, "grid", index);\n\n        var BaseGridComponent = /*#__PURE__*/react.cloneElement(gridComponent, gridProps);\n        var GridComponent = shouldRender(BaseGridComponent.props) ? BaseGridComponent : undefined;\n\n        var tickLabelProps = _this.getComponentProps(tickLabelComponent, "tickLabels", index);\n\n        var TickLabel = /*#__PURE__*/react.cloneElement(tickLabelComponent, tickLabelProps);\n        var children = [GridComponent, TickComponent, TickLabel].filter(Boolean);\n        return /*#__PURE__*/react.cloneElement(props.groupComponent, {\n          key: "".concat(name, "-tick-group-").concat(key)\n        }, children);\n      });\n    }\n  }, {\n    key: "fixLabelOverlap",\n    value: function fixLabelOverlap(gridAndTicks, props) {\n      var isVertical = victory_util_axis/* isVertical */.cp(props);\n      var size = isVertical ? props.height : props.width;\n\n      var isVictoryLabel = function (child) {\n        return child.type && child.type.role === "label";\n      };\n\n      var labels = gridAndTicks.map(function (gridAndTick) {\n        return gridAndTick.props.children;\n      }).reduce(function (accumulator, childArr) {\n        return accumulator.concat(childArr);\n      }, []).filter(isVictoryLabel).map(function (child) {\n        return child.props;\n      });\n\n      var paddingToObject = function (padding) {\n        return typeof padding === "object" ? assign_default()({}, {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        }, padding) : {\n          top: padding,\n          right: padding,\n          bottom: padding,\n          left: padding\n        };\n      };\n\n      var labelsSumSize = labels.reduce(function (sum, label) {\n        var padding = paddingToObject(label.style.padding);\n        var labelSize = textsize/* approximateTextSize */.Z9(label.text, {\n          angle: label.angle,\n          fontSize: label.style.fontSize,\n          letterSpacing: label.style.letterSpacing,\n          fontFamily: label.style.fontFamily\n        });\n        return sum + (isVertical ? labelSize.height + padding.top + padding.bottom : labelSize.width + padding.right + padding.left);\n      }, 0);\n      var availiableLabelCount = Math.floor(size * gridAndTicks.length / labelsSumSize);\n      var divider = Math.ceil(gridAndTicks.length / availiableLabelCount) || 1;\n\n      var getLabelCoord = function (gridAndTick) {\n        return gridAndTick.props.children.filter(isVictoryLabel).reduce(function (prev, child) {\n          return (isVertical ? child.props.y : child.props.x) || 0;\n        }, 0);\n      };\n\n      var sorted = gridAndTicks.sort(function (a, b) {\n        return isVertical ? getLabelCoord(b) - getLabelCoord(a) // ordinary axis has top-bottom orientation\n        : getLabelCoord(a) - getLabelCoord(b);\n      } // ordinary axis has left-right orientation\n      );\n      return sorted.filter(function (gridAndTick, index) {\n        return index % divider === 0;\n      });\n    } // Overridden in native versions\n\n  }, {\n    key: "shouldAnimate",\n    value: function shouldAnimate() {\n      return !!this.props.animate;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var animationWhitelist = VictoryAxis.animationWhitelist;\n      var props = victory_util_axis/* modifyProps */.TY(this.props, fallbackProps);\n      var userProps = user_props/* getSafeUserProps */.I(this.props);\n\n      if (this.shouldAnimate()) {\n        return this.animateComponent(props, animationWhitelist);\n      }\n\n      var gridAndTicks = this.renderGridAndTicks(props);\n      var modifiedGridAndTicks = props.fixLabelOverlap ? this.fixLabelOverlap(gridAndTicks, props) : gridAndTicks;\n      var children = [this.renderLine(props), this.renderLabel(props)].concat(victory_axis_toConsumableArray(modifiedGridAndTicks));\n      var container = /*#__PURE__*/react.cloneElement(props.containerComponent, userProps);\n      return props.standalone ? this.renderContainer(container, children) : /*#__PURE__*/react.cloneElement(props.groupComponent, userProps, children);\n    }\n  }]);\n\n  return VictoryAxisBase;\n}(react.Component);\n\nVictoryAxisBase.animationWhitelist = ["style", "domain", "range", "tickCount", "tickValues", "offsetX", "offsetY", "padding", "width", "height"];\nVictoryAxisBase.displayName = "VictoryAxis";\nVictoryAxisBase.role = "axis";\nVictoryAxisBase.defaultTransitions = {\n  onExit: {\n    duration: 500\n  },\n  onEnter: {\n    duration: 500\n  }\n};\nVictoryAxisBase.propTypes = _objectSpread(_objectSpread({}, common_props/* CommonProps.baseProps */.l.baseProps), {}, {\n  axisComponent: (prop_types_default()).element,\n  axisLabelComponent: (prop_types_default()).element,\n  axisValue: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string, (prop_types_default()).object]),\n  categories: prop_types_default().oneOfType([prop_types_default().arrayOf((prop_types_default()).string), prop_types_default().shape({\n    x: prop_types_default().arrayOf((prop_types_default()).string),\n    y: prop_types_default().arrayOf((prop_types_default()).string)\n  })]),\n  crossAxis: (prop_types_default()).bool,\n  dependentAxis: (prop_types_default()).bool,\n  events: prop_types_default().arrayOf(prop_types_default().shape({\n    target: prop_types_default().oneOf(["axis", "axisLabel", "grid", "ticks", "tickLabels"]),\n    eventKey: prop_types_default().oneOfType([(prop_types_default()).array, victory_util_prop_types/* allOfType */.BO([victory_util_prop_types/* integer */._L, victory_util_prop_types/* nonNegative */.A7]), (prop_types_default()).string]),\n    eventHandlers: (prop_types_default()).object\n  })),\n  fixLabelOverlap: (prop_types_default()).bool,\n  gridComponent: (prop_types_default()).element,\n  groupComponent: (prop_types_default()).element,\n  invertAxis: (prop_types_default()).bool,\n  label: (prop_types_default()).any,\n  offsetX: (prop_types_default()).number,\n  offsetY: (prop_types_default()).number,\n  orientation: prop_types_default().oneOf(["top", "bottom", "left", "right"]),\n  origin: prop_types_default().shape({\n    x: (prop_types_default()).number,\n    y: (prop_types_default()).number\n  }),\n  stringMap: (prop_types_default()).object,\n  style: prop_types_default().shape({\n    parent: (prop_types_default()).object,\n    axis: (prop_types_default()).object,\n    axisLabel: (prop_types_default()).object,\n    grid: (prop_types_default()).object,\n    ticks: (prop_types_default()).object,\n    tickLabels: (prop_types_default()).object\n  }),\n  tickComponent: (prop_types_default()).element,\n  tickCount: victory_util_prop_types/* allOfType */.BO([victory_util_prop_types/* integer */._L, victory_util_prop_types/* greaterThanZero */.KO]),\n  tickFormat: prop_types_default().oneOfType([(prop_types_default()).func, victory_util_prop_types/* homogeneousArray */.xx]),\n  tickLabelComponent: (prop_types_default()).element,\n  tickValues: victory_util_prop_types/* homogeneousArray */.xx\n});\nVictoryAxisBase.defaultProps = {\n  axisComponent: /*#__PURE__*/react.createElement(line_segment/* LineSegment */.c, null),\n  axisLabelComponent: /*#__PURE__*/react.createElement(victory_label/* VictoryLabel */.X, null),\n  tickLabelComponent: /*#__PURE__*/react.createElement(victory_label/* VictoryLabel */.X, null),\n  tickComponent: /*#__PURE__*/react.createElement(line_segment/* LineSegment */.c, null),\n  gridComponent: /*#__PURE__*/react.createElement(line_segment/* LineSegment */.c, null),\n  standalone: true,\n  theme: victory_theme/* VictoryTheme.grayscale */.J.grayscale,\n  containerComponent: /*#__PURE__*/react.createElement(victory_container/* VictoryContainer */._, null),\n  groupComponent: /*#__PURE__*/react.createElement("g", {\n    role: "presentation"\n  }),\n  fixLabelOverlap: false\n};\nVictoryAxisBase.getDomain = victory_util_axis/* getDomain */.ge;\nVictoryAxisBase.getAxis = victory_util_axis/* getAxis */.dd;\n\nVictoryAxisBase.getStyles = function (props) {\n  return getStyles(props);\n};\n\nVictoryAxisBase.getBaseProps = function (props) {\n  return getBaseProps(props, fallbackProps);\n};\n\nVictoryAxisBase.expectedComponents = ["axisComponent", "axisLabelComponent", "groupComponent", "containerComponent", "tickComponent", "tickLabelComponent", "gridComponent"];\nvar VictoryAxis = (0,add_events/* addEvents */.o)(VictoryAxisBase, options);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///73091\n')}}]);