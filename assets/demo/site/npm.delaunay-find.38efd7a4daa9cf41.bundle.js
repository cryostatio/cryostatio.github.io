"use strict";(self.webpackChunkcryostat_web=self.webpackChunkcryostat_web||[]).push([[5525],{33759:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = true;\nexports.Z = void 0;\n\nvar _delaunator = _interopRequireDefault(__webpack_require__(88030));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\n\n// From https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n} // A triangulation is collinear if all its triangles have a non-null area\n\n\nfunction collinear(d) {\n  var triangles = d.triangles,\n      coords = d.coords;\n\n  for (var i = 0; i < triangles.length; i += 3) {\n    var a = 2 * triangles[i];\n    var b = 2 * triangles[i + 1];\n    var c = 2 * triangles[i + 2];\n    var cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]); // eslint-disable-next-line no-magic-numbers\n\n    if (cross > 1e-10) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n} // eslint-disable-next-line max-params\n\n\nfunction flatArray(points, fx, fy, that) {\n  var n = points.length;\n  var array = new Float64Array(n * 2);\n\n  for (var i = 0; i < n; ++i) {\n    var p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n\n  return array;\n}\n\nvar Delaunay =\n/*#__PURE__*/\nfunction () {\n  function Delaunay(points) {\n    var delaunator = new _delaunator["default"](points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = delaunator.coords;\n\n    this._init(delaunator);\n  } // eslint-disable-next-line max-statements, complexity\n\n\n  var _proto = Delaunay.prototype;\n\n  _proto._init = function _init(delaunator) {\n    var d = delaunator;\n    var points = this.points; // check for collinear\n    // eslint-disable-next-line no-magic-numbers\n\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({\n        length: points.length / 2\n      }, function (_, i) {\n        return i;\n      }).sort(function (i, j) {\n        return points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1];\n      }); // for exact neighbors\n\n      var e = this.collinear[0];\n      var f = this.collinear[this.collinear.length - 1];\n      var bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]];\n      var r = 1e-8 * // eslint-disable-line no-magic-numbers\n      Math.sqrt(Math.pow(bounds[3] - bounds[1], 2) + Math.pow(bounds[2] - bounds[0], 2));\n\n      for (var i = 0, n = points.length / 2; i < n; ++i) {\n        var p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n\n      delaunator = new _delaunator["default"](points);\n    }\n\n    var halfedges = this.halfedges = delaunator.halfedges;\n    var hull = this.hull = delaunator.hull;\n    var triangles = this.triangles = delaunator.triangles;\n    var inedges = this.inedges.fill(-1);\n\n    var hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n\n\n    for (var _e = 0, _n = halfedges.length; _e < _n; ++_e) {\n      var _p = triangles[_e % 3 === 2 ? _e - 2 : _e + 1];\n      if (halfedges[_e] === -1 || inedges[_p] === -1) inedges[_p] = _e;\n    }\n\n    for (var _i = 0, _n2 = hull.length; _i < _n2; ++_i) {\n      hullIndex[hull[_i]] = _i;\n    } // degenerate case: 1 or 2 (distinct) points\n\n\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  } // eslint-disable-next-line max-statements\n  ;\n\n  _proto.neighbors = function neighbors(i) {\n    var results = [];\n    var inedges = this.inedges,\n        hull = this.hull,\n        _hullIndex = this._hullIndex,\n        halfedges = this.halfedges,\n        triangles = this.triangles;\n    var e0 = inedges[i];\n    if (e0 === -1) return results; // coincident point\n\n    var e = e0;\n    var p0 = -1;\n\n    do {\n      p0 = triangles[e];\n      results.push(p0);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n\n      e = halfedges[e];\n\n      if (e === -1) {\n        var p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) results.push(p);\n        break;\n      }\n    } while (e !== e0);\n\n    return results;\n  };\n\n  _proto.find = function find(x, y, i) {\n    if (i === void 0) {\n      i = 0;\n    }\n\n    // eslint-disable-next-line no-self-compare\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    var i0 = i;\n    var c;\n\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) {\n      i = c;\n    }\n\n    return c;\n  };\n\n  _proto._step = function _step(i, x, y) {\n    var inedges = this.inedges,\n        points = this.points;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    var c = i;\n    var dc = Math.pow(x - points[i * 2], 2) + Math.pow(y - points[i * 2 + 1], 2);\n\n    for (var _iterator = this.neighbors(i), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i2 >= _iterator.length) break;\n        _ref = _iterator[_i2++];\n      } else {\n        _i2 = _iterator.next();\n        if (_i2.done) break;\n        _ref = _i2.value;\n      }\n\n      var t = _ref;\n      var dt = Math.pow(x - points[t * 2], 2) + Math.pow(y - points[t * 2 + 1], 2);\n\n      if (dt < dc) {\n        dc = dt;\n        c = t;\n      }\n    }\n\n    return c;\n  };\n\n  return Delaunay;\n}(); // eslint-disable-next-line max-params\n\n\nexports.Z = Delaunay;\n\nDelaunay.from = function (points, fx, fy, that) {\n  if (fx === void 0) {\n    fx = pointX;\n  }\n\n  if (fy === void 0) {\n    fy = pointY;\n  }\n\n  return new Delaunay(flatArray(points, fx, fy, that));\n}; // only public methods will be .from and .find//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33759\n')}}]);